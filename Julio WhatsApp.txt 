const { default: makeWASocket, DisconnectReason, useMultiFileAuthState } = require('@adiwajshing/baileys');
const P = require('pino');

const filteredWords = ['zelle', 'usd', 'cashapp', 'combo', 'remesa'];

async function run() {
    console.log('starting');
    const { state, saveCreds } = await useMultiFileAuthState("baileys_auth_info");
    const sock = await makeWASocket({
        printQRInTerminal: true,
        logger: P({ level: 'silent' }),
        auth: state
    });

    sock.ev.on('connection.update', update => {
        const { connection, lastDisconnect } = update;
        if (connection === 'close') {
            if (lastDisconnect.error.hasOwnProperty('output') ? lastDisconnect.error.output.statusCode !== DisconnectReason.loggedOut : true) {
                console.log("Connection error, reconnecting...");
                run();
            } else if (lastDisconnect.error.output.statusCode === DisconnectReason.loggedOut) {
                console.log("Disconnected, reconnecting tried...");
                run();
            }
        } else if (connection === 'open') {
            console.log("Connected successfully to WhatsApp.");
        }
    });

    sock.ev.on('creds.update', saveCreds);

    const inactiveGroups = new Set(); // Conjunto de grupos inactivos
    const maxInactiveTime = 5 * 60 * 60 * 1000; // 5 horas en milisegundos

    sock.ev.on('message-new', ({ message }) => {
        const groupId = message.key.remoteJID;
        inactiveGroups.delete(groupId); // Eliminar el grupo del conjunto de grupos inactivos si se recibe un mensaje

        const messageText = message.text && message.text.toLowerCase();
        const filteredWord = filteredWords.find(word => messageText.includes(word));

        if (filteredWord) {
            const responseMessage = {
                text: `🇺🇸🇨🇺  *OFERTA DE REMESAS Y COMBOS DE COMIDAS* 🇺🇸🇨🇺\n\n➡️ *100 USD* 🇺🇲 - *18 000 CUP* 🇨🇺\n➡️ *105 USD 🇺🇸 - 100USD/MLC* 🇨🇺\n\n‼️ *PARA SABER LAS OFERTAS DE LOS COMBOS DE COMIDA PASE AL PV* ‼️\n\n*COMPRO DIVISAS*\n*MLC A 182*\n*USD A 188*\n*EUROS A 190*\n\n*CANADIENSE A 115*\n *Link de grupo de WhatsApp:* https://chat.whatsapp.com/L1frnLZTSykG2JTqZnnVk9\n\n*TRATO PRECENCIAL en toda la Isla de la juventud*`
            };
            const options = {};
            sock.sendMessage(groupId, responseMessage, options).then(() => {
                console.log(`Mensaje de respuesta enviado a ${groupId}`);
                setTimeout(() => {
                    inactiveGroups.delete(groupId);
                }, 20 * 60 * 1000); // Eliminar el grupo del conjunto de grupos inactivos después de 20 minutos
            }).catch(error => {
                console.log(`Error al enviar el mensaje de respuesta a ${groupId}: ${error}`);
            });
        }
    });

    setInterval(() => {
        const currentTime = Date.now();
        sock.getChats().then(chats => {
            chats.forEach(chat => {
                const groupId = chat.jid;
                if (!inactiveGroups.has(groupId) && (currentTime - chat.t * 1000) > maxInactiveTime) {
                    const responseMessage = {
                        text: `🇺🇸🇨🇺  *OFERTA DE REMESAS Y COMBOS DE COMIDAS* 🇺🇸🇨🇺\n\n➡️ *100 USD* 🇺🇲 - *18 000 CUP* 🇨🇺\n➡️ *105 USD 🇺🇸 - 100USD/MLC* 🇨🇺\n\n‼️ *PARA SABER LAS OFERTAS DE LOS COMBOS DE COMIDA PASE AL PV* ‼️\n\n*COMPRO DIVISAS*\n*MLC A 182*\n*USD A 188*\n*EUROS A 190*\n\n*CANADIENSE A 115*\n *Link de grupo de WhatsApp:* https://chat.whatsapp.com/L1frnLZTSykG2JTqZnnVk9\n\n*TRATO PRECENCIAL en toda la Isla de la juventud*`
                    };
                    const options = {};
                    sock.sendMessage(groupId, responseMessage, options).then(() => {
                        console.log(`Mensaje de inactividad enviado a ${groupId}`);
                        inactiveGroups.add(groupId);
                    }).catch(error => {
                        console.log(`Error al enviar el mensaje de inactividad a ${groupId}: ${error}`);
                    });
                }
            });
        });
    }, 60000); // Verificar la inactividad cada minuto

    await sock.connect();

    console.log("Esperando mensajes...");

    await new Promise(() => { });
}

run().catch(console.error);
